import ollama
import speech_recognition as sr
import pyttsx3
import webbrowser
import os
import ctypes

engine = pyttsx3.init()
voices = engine.getProperty('voices')
engine.setProperty('voice', voices[0].id)
engine.setProperty('rate', 210)

SW_MINIMIZE, SW_RESTORE = 6, 9
kernel32, user32 = ctypes.windll.kernel32, ctypes.windll.user32

is_processing_command, has_minimized = False, False

def minimize_console():
    hwnd = kernel32.GetConsoleWindow()
    if hwnd:
        user32.ShowWindow(hwnd, SW_MINIMIZE)

def restore_console():
    hwnd = kernel32.GetConsoleWindow()
    if hwnd:
        user32.ShowWindow(hwnd, SW_RESTORE)
        user32.SetForegroundWindow(hwnd)

def speak(text):
    print(text)
    engine.say(text)
    engine.runAndWait()

def process_command(command):
    global is_processing_command, has_minimized

    if "friday" in command:
        restore_console()
        query = command.replace("friday", "").strip()
        speak("Yes, how can I assist you?" if not query else f"Searching for: {query}")
        if query: perform_google_search(query)

    elif "exit" in command:
        speak("Goodbye!")
        os._exit(0)

    elif ("minimize" in command or "minimise" in command) and not has_minimized:
        has_minimized = True
        minimize_console()
        speak("Window minimized.")

    elif "google" in command:
        query = command.replace("google", "").strip()
        speak("Provide search terms." if not query else f"Searching Google for: {query}")
        if query: perform_google_search(query)

    elif "help" in command:
        speak("I can search, minimize, or chat. Just ask!")

    else:
        respond_to_conversation(command)

def respond_to_conversation(command):
    try:
        response = ollama.chat(model="llama3.2:3b", messages=[{"role": "user", "content": command}])
        speak(response.message.content)
    except Exception as e:
        speak("Error with conversation model.")

def perform_google_search(query):
    webbrowser.open(f"https://www.google.com/search?q={query}")

def listen_for_commands():
    global is_processing_command
    recognizer = sr.Recognizer()

    with sr.Microphone() as source:
        print("Listening for commands...")
        recognizer.adjust_for_ambient_noise(source)

        while True:
            try:
                command = recognizer.recognize_google(recognizer.listen(source)).lower().strip()
                print(f"Recognized: {command}")
                if not is_processing_command:
                    is_processing_command = True
                    process_command(command)
                    is_processing_command = False
            except sr.UnknownValueError:
                print("Could not understand.")
            except sr.RequestError:
                print("Recognition service error.")

def main():
    try:
        speak("Voice assistant running. Say 'FRIDAY' to start.")
        listen_for_commands()
    except Exception as e:
        speak(f"Error: {e}")

if __name__ == "__main__":
    main()
